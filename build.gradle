buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.13.0'
}

allprojects {
    apply plugin:"idea"
}

def pluginProjects = ['spring-security-rest', 'spring-security-rest-memcached', 'spring-security-rest-redis', 'spring-security-rest-grailscache', 'spring-security-rest-gorm']
def profileProjects = ['spring-security-rest-testapp-profile']
def publishedProjects = pluginProjects

subprojects { Project project ->
    ext {
        grailsVersion = project.grailsVersion
        gradleWrapperVersion = project.gradleWrapperVersion
    }

    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }

    version "2.0.0.BUILD-SNAPSHOT"
    group "org.grails.plugins"
    ext.isSnapshot = version.endsWith('SNAPSHOT')

    if (project.name in pluginProjects) {
        apply plugin: "org.grails.grails-plugin"
        apply plugin: "org.grails.grails-plugin-publish"
        apply plugin: "com.jfrog.artifactory"

        sourceCompatibility = targetCompatibility = 1.7

        dependencies {
            console "org.grails:grails-console"

            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"

            provided "org.grails:grails-plugin-services"

            testCompile "org.grails:grails-plugin-testing"
            testCompile('com.athaydes:spock-reports:1.2.12') {
                transitive = false
            }
        }

        test {
            testLogging {
                exceptionFormat = 'full'
                events 'failed', 'standardOut', 'standardError'
            }

            beforeTest { descriptor -> logger.quiet " -- $descriptor" }
        }

        artifactoryPublish {
            dependsOn sourcesJar, javadocJar
        }
    }

    if (project.name in profileProjects) {
        apply plugin: "org.grails.grails-profile"
    }

    if (project.name in publishedProjects) {
        grailsPublish {
            user = bintrayUser
            key = bintrayKey
            portalUser = pluginPortalUser
            portalPassword = pluginPortalPassword
            userOrg = 'grails'
            repo = 'plugins'
            githubSlug = 'alvarosanchez/grails-spring-security-rest'
            license = 'APACHE 2.0'
            title = "Spring Security REST plugin"
            desc = "Grails plugin to implement token-based, RESTful authentication using Spring Security"
            developers = [
                alvarosanchez: "Alvaro Sanchez-Mariscal",
                Schlogen: "James Kleeh"
            ]
        }

        artifactory {
            contextUrl = 'http://oss.jfrog.org'
            publish {
                repository {
                    repoKey = isSnapshot ? 'oss-snapshot-local' : 'oss-release-local'
                    username = bintrayUser
                    password = bintrayKey
                }
                defaults {
                    // Reference to Gradle configurations defined in the build script.
                    // This is how we tell the Artifactory Plugin which artifacts should be
                    // published to Artifactory.
                    publications('maven')
                }
            }
        }

        task exportVersion << {
            new File("${buildDir}/version.txt").write(project.version as String)
        }

        check.dependsOn exportVersion
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

task aggregateGroovyDoc(type: Groovydoc) {
    def groovyDocProjects = subprojects.findAll { it.name in pluginProjects }
    group = JavaBasePlugin.DOCUMENTATION_GROUP

    dependsOn groovyDocProjects.groovydoc
    source groovyDocProjects.groovydoc.source
    destinationDir file("${buildDir}/docs/groovydoc")
    classpath = files(groovyDocProjects.groovydoc.classpath)
    groovyClasspath = files(groovyDocProjects.groovydoc.groovyClasspath)
}